---
import Layout from "@layouts/Layout.astro";
import { items } from "../lib/categories.js";
import CardPorProducto from "@components/ui/CardPorProducto.astro";
import { productos } from "@lib/products";
import pdfs_carta from "@lib/pdfs_carta";
import pdfs_tabla from "@lib/pdfs_tabla";
import { segmentos } from "@lib/segmentos";

export async function getStaticPaths() {
  return items.map((item) => ({
    params: { id: item.id.toString() },
  }));
}

const { id } = Astro.params;

const item = items.find((product) => product.id.toString() === id);

if (!item) {
  throw new Error(`Item with ID ${id} not found`);
}

const filteredProductos = productos.filter((product) =>
  item.productos.includes(product.id)
);

console.log("productos:", filteredProductos);

const filteredSegmentos = filteredProductos.flatMap((product) =>
  segmentos.filter((segmento) => product.segmentos.includes(segmento.id))
);

const uniqueSegment = [
  ...new Set(filteredSegmentos.map((segmento) => segmento)),
];

const isAnyProductWithPTag = filteredProductos.some((product) =>
  product.descripcion.includes("<p>")
);

const descripcion = item.descripcion;

let editedDesc = descripcion;
if (/<table/.test(descripcion)) {
  editedDesc = editedDesc
    .replace(
      "<div",
      '<div class="flex flex-col justify-center items-center w-11/12 text-gray-800 font-medium leading-relaxed"'
    )
    .replace(
      "<thead>",
      '<thead class="bg-gray-200 border border-gray-300 border-t-1 border-l-1 border-r-1"'
    )
    .replace(
      "<table",
      '<table class="text-center justify-center items-center w-full"'
    )
    .replace(
      /<td/g,
      '<td class="border border-gray-300 border-t-1 border-l-1 border-r-1"'
    )
    .replace(/<\/thead>/, "</thead>");
}

editedDesc = `<div class="flex justify-center items-center w-full text-gray-800 font-medium leading-relaxed gap-10">${editedDesc}</div>`;
---

<Layout title={item.nombre_url}>
  <section class="mt-[96px] bg-white flex flex-col items-center">
    <h1 class="text-header-bg font-semibold text-5xl px-5 text-center py-10">
      {
        (item.nombre_url || item.nombre).charAt(0).toUpperCase() +
          (item.nombre_url || item.nombre).slice(1)
      }
    </h1>
    <div
      class="max-w-[1000px] text-custom-grey font-light px-5 text-center text-sm sm:text-base"
    >
      <div set:html={editedDesc} />
    </div>
    <div class="flex flex-wrap justify-center gap-5 m-5">
      {
        uniqueSegment.map((segment) =>
          segment.marca ? (
            <button
              class="segment-button hover:scale-105 transition-all shadow-md"
              data-segment-id={segment.id}
            >
              <img
                src={segment.fotoUrl}
                alt={segment.nombre}
                class="w-auto h-24 object-cover rounded-md"
              />
            </button>
          ) : (
            <button
              class="bg-blue-500 text-white py-2 px-4 rounded segment-button hover:scale-105 transition-all"
              data-segment-id={segment.id}
            >
              {segment.nombre}
            </button>
          )
        )
      }
    </div>
    <div
      class={`w-3/4 mt-10 mb-20 ${isAnyProductWithPTag ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5" : "flex flex-col items-center w-3/4 gap-5"}`}
    >
      {
        filteredProductos.map((product) => {
          const productPdfs_tabla = pdfs_tabla.filter((pdf) =>
            product.pdfs_tabla.includes(pdf.id)
          );
          const productPdfs_carta = pdfs_carta.filter((pdf) =>
            product.pdfs_carta.includes(pdf.id)
          );

          return (
            <CardPorProducto
              id={`${product.segmentos},${product.id}`}
              imgSrc={product.fotoUrl || "vacio"}
              text={product.nombre}
              desc={product.descripcion}
              pdfs_tabla={productPdfs_tabla}
              pdfs_carta={productPdfs_carta}
            />
          );
        })
      }
    </div>
  </section>

  <script>
    document.querySelectorAll(".segment-button").forEach((button) => {
      button.addEventListener("click", () => {
        const segmentId = button.getAttribute("data-segment-id");
        const products = document.querySelectorAll("[id]");

        let targetProduct = null;
        products.forEach((product) => {
          if (product.id.includes(segmentId) && !targetProduct) {
            targetProduct = product;
          }
        });

        if (targetProduct) {
          targetProduct.scrollIntoView({ behavior: "smooth" });
        }
      });
    });
  </script>
</Layout>
